let jsarray xs = Array.prototype.slice.call xs 0
let always x = (\() -> x)
let length xs = (jsarray xs).length
let empty xs = (length xs) == 0
let concat xs ys = (jsarray xs).concat ys
let cons x xs = concat [x] xs
let head xs = xs@0
let tail xs = (jsarray xs).slice 1
let last xs = xs@((length xs) - 1)
let times n x = map (always x) (range 1 n)
let sum xs = foldl (\x y -> x + y) 0 xs
let map f xs = 
  if empty xs then
    []
  else
    cons (f (head xs)) (map f (tail xs))
let filter f xs = 
  if empty xs then
    []
  else
    if f (head xs) then
      cons (head xs) (filter f (tail xs))
    else
      filter f (tail xs)
let range start end = 
  if start > end then
    []
  else
    cons start (range (start+1) end)

let zip f xs ys = if (((length xs) == 0) || ((length ys) == 0)) then []Â else cons (f (head xs) (head ys)) (zip f (tail xs) (tail ys))
let scanl f seed xs = if empty xs then [seed] else cons seed (scanl f (f seed (head xs)) (tail xs))
let foldl f seed xs = last (scanl f seed xs)
