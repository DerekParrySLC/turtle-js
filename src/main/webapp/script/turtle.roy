let callbacks = {
  make: \f ->
    \callback ->
      f ()
      callMaybe callback
}
let callMaybe callback = if (callback != null) then callback () else null

let fd d = callbacks.make (\() -> turtle.fd d)
let lt a = callbacks.make (\() -> turtle.lt a)
let rt a = callbacks.make(\() -> turtle.rt a)
let pendown = callbacks.make(\() -> turtle.pendown ())
let penup = callbacks.make(\() -> turtle.penup ())
let clear = callbacks.make(\() -> turtle.clear ())
let wait seconds = (\callback -> setTimeout callback (seconds * 1000))
let say text = callbacks.make (\() -> speak text)

// Action sequencing / repeat utils

let sequence fs = \callback ->
  if empty fs then
    callMaybe callback
  else
    (head fs) (\() -> (sequence (tail fs)) callback)
let repeat n f = sequence (times n f)
