let jsarray xs =
  let plusOne = Array.prototype.concat.apply [1] xs
  let jsarr = Array.apply null plusOne
  jsarr.slice 1
let always x = (\() -> x)
let length xs = (jsarray xs).length
let empty xs = (length xs) == 0
let concat xs ys = (jsarray xs).concat ys
let cons x xs = concat [x] xs
let head xs = xs@0
let tail xs = (jsarray xs).slice 1
let times n x = map (always x) (range 1 n)
let map f xs = 
  if empty xs then
    []
  else
    cons (f (head xs)) (map f (tail xs))
let filter f xs = 
  if empty xs then
    []
  else
    if f (head xs) then
      cons (head xs) (filter f (tail xs))
    else
      filter f (tail xs)
let range start end = 
  if start > end then
    []
  else
    cons start (range (start+1) end)

